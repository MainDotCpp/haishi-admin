package com.haishi.admin.{{package}}.service;

import cn.hutool.core.bean.BeanUtil;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.haishi.admin.common.dto.PageDTO;
import com.haishi.admin.{{package}}.dao.{{Biz}}Repository;
import com.haishi.admin.{{package}}.dto.{{Biz}}DTO;
import com.haishi.admin.{{package}}.entity.{{Biz}};
import com.haishi.admin.{{package}}.entity.Q{{Biz}};
import com.haishi.admin.{{package}}.entity.QServer;
import com.haishi.admin.{{package}}.mapper.{{Biz}}Mapper;
import com.querydsl.core.QueryResults;
import com.querydsl.core.types.Predicate;
import com.querydsl.jpa.hibernate.HibernateUpdateClause;
import com.querydsl.jpa.hibernate.HibernateUtil;
import com.querydsl.jpa.impl.JPAQuery;
import com.querydsl.jpa.impl.JPAQueryFactory;
import jakarta.persistence.EntityManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.hibernate.SessionFactory;
import org.springframework.data.jpa.provider.HibernateUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Service for {@link {{Biz}}}
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class {{Biz}}Service {
    private final {{Biz}}Repository {{biz}}Repository;
    private final {{Biz}}Mapper {{biz}}Mapper;
    private final JPAQueryFactory jpaQueryFactory;
    private final EntityManager entityManager;

    /**
     * 根据ID获取{{comment}}
     *
     * @param id ID
     * @return {@link {{Biz}}DTO}
     */
    public {{Biz}}DTO getById(Long id) {
        return {{biz}}Mapper.to{{Biz}}DTO({{biz}}Repository.findById(id).orElse(null));
    }

    /**
     * 构建查询
     *
     * @param dto 查询条件
     * @return {@link JPAQuery<{{Biz}}>}
     */
    private JPAQuery<{{Biz}}> buildQuery({{Biz}}DTO dto) {
        Q{{Biz}} q{{biz}} = Q{{Biz}}.{{biz}}1;
        JPAQuery<{{Biz}}> query = jpaQueryFactory
                .selectFrom(q{{biz}});
        query.where(new Predicate[]{
                dto.getId() != null ? q{{biz}}.id.eq(dto.getId()) : null,
        });
        query.orderBy(q{{biz}}.id.desc());
        return query;
    }

    /**
     * {{comment}}列表
     *
     * @param dto 查询条件
     * @return {@link List<{{Biz}}DTO>}
     */
    public List<{{Biz}}DTO> list({{Biz}}DTO dto) {
        JPAQuery<{{Biz}}> query = buildQuery(dto);
        return {{biz}}Mapper.to{{Biz}}DTOList(query.fetch());
    }

    /**
     * 分页查询{{comment}}
     *
     * @param dto      查询条件
     * @param current  当前页
     * @param pageSize 每页大小
     * @return {@link PageDTO<{{Biz}}DTO>}
     */
    public PageDTO<{{Biz}}DTO> page({{Biz}}DTO dto, Integer current, Integer pageSize) {
        JPAQuery<{{Biz}}> query = buildQuery(dto);
        query.offset((long) (current - 1) * pageSize).limit(pageSize);
        QueryResults<{{Biz}}> results = query.fetchResults();
        return new PageDTO<>(current, pageSize, {{biz}}Mapper.to{{Biz}}DTOList(results.getResults()), results.getTotal());
    }

    /**
     * 保存{{comment}}
     *
     * @param dto {@link {{Biz}}DTO}
     * @return {@link {{Biz}}DTO}
     */
    @Transactional(rollbackFor = Exception.class)
    public {{Biz}}DTO save({{Biz}}DTO dto) {
        {{Biz}} {{biz}} = new {{Biz}}();
        if (dto.getId() != null) {
            {{Biz}} exist = jpaQueryFactory.selectFrom(Q{{Biz}}.{{biz}}1).where(Q{{Biz}}.{{biz}}1.id.eq(dto.getId())).fetchOne();
            {{biz}} = {{biz}}Mapper.copy(exist);
        }
        {{biz}}Mapper.partialUpdate(dto, {{biz}});
        return {{biz}}Mapper.to{{Biz}}DTO({{biz}}Repository.save({{biz}}));
    }

    /**
     * 通过ID删除{{comment}}
     *
     * @param id ID
     * @return boolean
     */
    public boolean delete(Long id) {
        {{biz}}Repository.deleteById(id);
        return true;
    }
}