package com.haishi.admin.{{ package }}.service;

import com.haishi.admin.{{ package }}.dto.{{biz_name_upper}}QueryDTO;
import com.haishi.admin.cloak.entity.Q{{ biz_name_upper }};
import com.haishi.admin.common.dto.PageDTO;
import com.haishi.admin.{{ package }}.dao.{{biz_name_upper}}Repository;
import com.haishi.admin.{{ package }}.entity.{{biz_name_upper}};
import com.querydsl.core.types.Predicate;
import com.querydsl.jpa.impl.JPAQuery;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
@Slf4j
@Service
@RequiredArgsConstructor
public class {{biz_name_upper}}Service {
    private final {{biz_name_upper}}Repository {{biz_name}}Repository;
    private final JPAQueryFactory jpaQueryFactory;

    public {{biz_name_upper}} getById(Long id) {
        return {{biz_name}}Repository.findById(id).orElse(null);
    }

    public PageDTO<{{biz_name_upper}}> page({{biz_name_upper}}QueryDTO queryDTO) {
        JPAQuery<{{biz_name_upper}}> query = jpaQueryFactory.selectFrom(Q{{biz_name_upper}}.{{biz_name}});
        ArrayList<Predicate> predicates = new ArrayList<>();
        if (queryDTO.getConfigId() != null) {
            predicates.add(Q{{biz_name_upper}}.{{biz_name}}.configId.eq(queryDTO.getConfigId()));
        }
        query.where(predicates.toArray(Predicate[]::new));

        queryDTO.setTotal(query.fetchCount());
        List<{{biz_name_upper}}> data = query.offset((long) (queryDTO.getCurrent() - 1) * queryDTO.getPageSize()).limit(queryDTO.getPageSize()).fetch();
        queryDTO.setData(data);
        return queryDTO;
    }

    public {{biz_name_upper}} save({{biz_name_upper}} {{biz_name}}) {
        return {{biz_name}}Repository.save({{biz_name}});
    }

    public boolean delete(Long id) {
        {{biz_name}}Repository.deleteById(id);
        return true;
    }
}