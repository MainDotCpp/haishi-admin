package com.haishi.admin.{{package}}.service;

import com.haishi.admin.common.dto.PageDTO;
import com.haishi.admin.common.exception.BizException;
import com.haishi.admin.{{package}}.dao.{{pascalCase name}}Repository;
import com.haishi.admin.{{package}}.dto.{{pascalCase name}}DTO;
import com.haishi.admin.{{package}}.entity.Q{{pascalCase name}};
import com.haishi.admin.{{package}}.entity.{{pascalCase name}};
import com.haishi.admin.{{package}}.mapper.{{pascalCase name}}Mapper;
import com.querydsl.core.QueryResults;
import com.querydsl.core.types.Predicate;
import com.querydsl.jpa.impl.JPAQuery;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Service for {@link {{pascalCase name}} }
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class {{pascalCase name}}Service {
    private final {{pascalCase name}}Repository {{camelCase name}}Repository;
    private final {{pascalCase name}}Mapper {{camelCase name}}Mapper;
    private final JPAQueryFactory jpaQueryFactory;

    /**
     * 根据ID获取{{comment}}
     *
     * @param id ID
     * @return {@link {{pascalCase name}}DTO}
     */
    public {{pascalCase name}}DTO getById(Long id) {
        return {{camelCase name}}Mapper.to{{pascalCase name}}DTO({{camelCase name}}Repository.findById(id).orElse(null));
    }

    /**
     * 构建查询
     *
     * @param dto 查询条件
     * @return {@link JPAQuery<{{pascalCase name}}>}
     */
    private JPAQuery<{{pascalCase name}}> buildQuery({{pascalCase name}}DTO dto) {
        Q{{pascalCase name}} q{{camelCase name}} = Q{{pascalCase name}}.{{camelCase name}};
        JPAQuery<{{pascalCase name}}> query = jpaQueryFactory
                .selectFrom(q{{camelCase name}});
        query.where(new Predicate[]{
                dto.getId() != null ? q{{camelCase name}}.id.eq(dto.getId()) : null,
        });
        query.orderBy(q{{camelCase name}}.id.desc());
        return query;
    }

    /**
     * {{comment}}列表
     *
     * @param dto 查询条件
     * @return {@link List<{{pascalCase name}}DTO>}
     */
    public List<{{pascalCase name}}DTO> list({{pascalCase name}}DTO dto) {
        JPAQuery<{{pascalCase name}}> query = buildQuery(dto);
        return {{camelCase name}}Mapper.to{{pascalCase name}}DTOList(query.fetch());
    }

    /**
     * 分页查询{{comment}}
     *
     * @param dto      查询条件
     * @param current  当前页
     * @param pageSize 每页大小
     * @return {@link PageDTO<{{pascalCase name}}DTO>}
     */
    public PageDTO<{{pascalCase name}}DTO> page({{pascalCase name}}DTO dto, Integer current, Integer pageSize) {
        JPAQuery<{{pascalCase name}}> query = buildQuery(dto);
        query.offset((long) (current - 1) * pageSize).limit(pageSize);
        QueryResults<{{pascalCase name}}> results = query.fetchResults();
        return new PageDTO<>(current, pageSize, {{camelCase name}}Mapper.to{{pascalCase name}}DTOList(results.getResults()), results.getTotal());
    }

    /**
     * 保存{{comment}}
     *
     * @param dto {@link {{pascalCase name}}DTO}
     * @return {@link {{pascalCase name}}DTO}
     */
    @Transactional(rollbackFor = Exception.class)
    public {{pascalCase name}}DTO save({{pascalCase name}}DTO dto) {
        {{pascalCase name}} {{camelCase name}} = new {{pascalCase name}}();
        if (dto.getId() != null)
            {{camelCase name}} = {{camelCase name}}Repository.findById(dto.getId()).orElseThrow(() -> new BizException("系统错误:{{comment}}不存在"));
        {{camelCase name}}Mapper.partialUpdate(dto, {{camelCase name}});
        return {{camelCase name}}Mapper.to{{pascalCase name}}DTO({{camelCase name}}Repository.save({{camelCase name}}));
    }

    /**
     * 通过ID删除{{comment}}
     *
     * @param id ID
     * @return boolean
     */
    public boolean delete(Long id) {
        {{camelCase name}}Repository.deleteById(id);
        return true;
    }
}